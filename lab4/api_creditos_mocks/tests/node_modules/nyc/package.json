{
  "_args": [
    [
      "nyc@^14.0.0",
      "/home/jovani/Documents/proyectos jovani/cursos_2019/junio_2019/curso-microservicios_1/workshop_openapi/seccion1/lab4/api_creditos_mocks/tests/node_modules/tap"
    ]
  ],
  "_from": "nyc@>=14.0.0 <15.0.0",
  "_hasShrinkwrap": false,
  "_id": "nyc@14.1.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/nyc",
  "_nodeVersion": "12.1.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/nyc_14.1.1_1557442385271_0.8835663649869885"
  },
  "_npmUser": {
    "email": "git@cfware.com",
    "name": "coreyfarrell"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {
    "decamelize": "1.2.0",
    "emoji-regex": "7.0.3",
    "execa": "1.0.0",
    "is-fullwidth-code-point": "2.0.0",
    "locate-path": "3.0.0",
    "mem": "4.3.0",
    "require-directory": "2.1.1",
    "set-blocking": "2.0.0",
    "strip-ansi": "4.0.0",
    "wrap-ansi": "2.1.0"
  },
  "_requested": {
    "name": "nyc",
    "raw": "nyc@^14.0.0",
    "rawSpec": "^14.0.0",
    "scope": null,
    "spec": ">=14.0.0 <15.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/tap"
  ],
  "_resolved": "https://registry.npmjs.org/nyc/-/nyc-14.1.1.tgz",
  "_shasum": "151d64a6a9f9f5908a1b73233931e4a0a3075eeb",
  "_shrinkwrap": null,
  "_spec": "nyc@^14.0.0",
  "_where": "/home/jovani/Documents/proyectos jovani/cursos_2019/junio_2019/curso-microservicios_1/workshop_openapi/seccion1/lab4/api_creditos_mocks/tests/node_modules/tap",
  "author": {
    "email": "ben@npmjs.com",
    "name": "Ben Coe"
  },
  "bin": {
    "nyc": "./bin/nyc.js"
  },
  "bugs": {
    "url": "https://github.com/istanbuljs/nyc/issues"
  },
  "contributors": [
    {
      "name": "Isaac Schlueter"
    },
    {
      "name": "Mark Wubben"
    },
    {
      "name": "James Talmage"
    },
    {
      "name": "Krishnan Anantheswaran"
    }
  ],
  "dependencies": {
    "archy": "^1.0.0",
    "caching-transform": "^3.0.2",
    "convert-source-map": "^1.6.0",
    "cp-file": "^6.2.0",
    "find-cache-dir": "^2.1.0",
    "find-up": "^3.0.0",
    "foreground-child": "^1.5.6",
    "glob": "^7.1.3",
    "istanbul-lib-coverage": "^2.0.5",
    "istanbul-lib-hook": "^2.0.7",
    "istanbul-lib-instrument": "^3.3.0",
    "istanbul-lib-report": "^2.0.8",
    "istanbul-lib-source-maps": "^3.0.6",
    "istanbul-reports": "^2.2.4",
    "js-yaml": "^3.13.1",
    "make-dir": "^2.1.0",
    "merge-source-map": "^1.1.0",
    "resolve-from": "^4.0.0",
    "rimraf": "^2.6.3",
    "signal-exit": "^3.0.2",
    "spawn-wrap": "^1.4.2",
    "test-exclude": "^5.2.3",
    "uuid": "^3.3.2",
    "yargs": "^13.2.2",
    "yargs-parser": "^13.0.0"
  },
  "description": "the Istanbul command line interface",
  "devDependencies": {
    "any-path": "^1.3.0",
    "chai": "^4.2.0",
    "coveralls": "^3.0.3",
    "cross-env": "^5.2.0",
    "is-windows": "^1.0.2",
    "lodash": "^4.17.11",
    "newline-regex": "^0.2.1",
    "pify": "^4.0.1",
    "requirejs": "^2.3.6",
    "sanitize-filename": "^1.6.1",
    "source-map-support": "^0.5.12",
    "standard": "^12.0.1",
    "standard-version": "^5.0.2",
    "strip-indent": "^2.0.0",
    "tap": "^12.6.5",
    "which": "^1.3.1",
    "zero-fill": "^2.2.3"
  },
  "directories": {},
  "dist": {
    "fileCount": 18,
    "integrity": "sha512-OI0vm6ZGUnoGZv/tLdZ2esSVzDwUC88SNs+6JoSOMVxA+gKMB8Tk7jBwgemLx4O40lhhvZCVw1C+OYLOBOPXWw==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc1K9SCRA9TVsSAnZWagAAzX0P/Rxt9HUYPtcq2AdfWtW+\nfKfMkZDHCTIXQIjF1M+xB/qJ/6W0+0lvjR5RTTlfI6EJISc+lfQqgNjG5kEP\netnA/vBjsYlrNrxpuzrKCdTaaJYfVMkBcdTtQ+oXs3yVzTN/3EirjXvqMjIF\nrYPFhHh7oG69xhGjDA8VjiayhFAcJ8mMFf2UFR0KeoJqxxFF1YlbTYZ6x6Fk\nZSw1apYLCJN8AzWnazNvhULaP12Z82nWSOhO3DJEVxMjBhW6Ie22tpHd7vef\n1SmrQDkT+fyFPpdh98LiT+25GYS/QIil+EGjY+q4WDpXdzd8BssyWVL0lX9a\nehVDMKd5g/iluCM/z7uTs0knMUcCLGJ3igOrmzMQsDGAC2HoaMin2LG3Uw/5\nRla8vLdovhBK1rB/JgGUpHSSJkNHQtLDkW4JDih3fNaxWG7G13+j0zjnhPvI\np8NBC7MsXczndWTVwx6z1h1cBj9a6WSjDnXqsX1e2SVv1lh5FXfYZOo2vjWn\nu9byeGjpewTHWamwwqy2jzJxFE0Qg8Qc2S5MogJbPiJiNvfXcu/JtgPK7woI\nzHBuDcZKKTsQSLujBoBgfzaB75gW3loRWwtCNxwhEgP1NzdU/A15X0xZ5E19\nXeOE0cb/SfQqttnFHwFtZyYOsGb86mbLYVMQYg46AW/Aq7/vmPVUFKgsGdvI\nN0Iw\r\n=Obwn\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "151d64a6a9f9f5908a1b73233931e4a0a3075eeb",
    "tarball": "https://registry.npmjs.org/nyc/-/nyc-14.1.1.tgz",
    "unpackedSize": 113202
  },
  "engines": {
    "node": ">=6"
  },
  "gitHead": "fe3311bd4770726c67e6eee1e39b15a3b616457b",
  "homepage": "https://github.com/istanbuljs/nyc#readme",
  "keywords": [
    "coverage",
    "reporter",
    "subprocess",
    "testing"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "bcoe",
      "email": "ben@npmjs.com"
    },
    {
      "name": "coreyfarrell",
      "email": "git@cfware.com"
    },
    {
      "name": "isaacs",
      "email": "i@izs.me"
    }
  ],
  "name": "nyc",
  "nyc": {
    "exclude": [
      "coverage",
      "node_modules",
      "self-coverage",
      "test/build/*",
      "test/fixtures/_generateCoverage.js",
      "test/fixtures/coverage.js",
      "test/nyc.js",
      "test/process-args.js",
      "test/src/*"
    ]
  },
  "optionalDependencies": {},
  "readme": "# nyc\n\n[![Build Status](https://travis-ci.org/istanbuljs/nyc.svg?branch=master)](https://travis-ci.org/istanbuljs/nyc)\n[![Coverage Status](https://coveralls.io/repos/istanbuljs/nyc/badge.svg?branch=)](https://coveralls.io/r/istanbuljs/nyc?branch=master)\n[![NPM version](https://img.shields.io/npm/v/nyc.svg)](https://www.npmjs.com/package/nyc)\n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n[![community slack](https://devtoolscommunity.herokuapp.com/badge.svg)](http://devtoolscommunity.herokuapp.com)\n\n_Having problems? want to contribute? join our [community slack](http://devtoolscommunity.herokuapp.com)_.\n\nIstanbul's state of the art command line interface, with support for:\n\n* applications that spawn subprocesses.\n* source mapped coverage of Babel and TypeScript projects\n\n## Installation & Usage\n\nUse your package manager to add it as a dev dependency: `npm i -D nyc` or `yarn add -D nyc`.\nYou can use nyc to call npm scripts (assuming they don't already have nyc executed in them), like so (replace `mocha` with your test runner everywhere you see it):\n```json\n{\n  \"scripts\": {\n    \"test\": \"mocha\",\n    \"coverage\": \"nyc npm run test\"\n  }\n}\n```\n\nYou can use also `npx` instead of installing nyc as a dependency, but you might get updates you are not ready for; to get around this, pin to a specific major version by specifying, e.g. `nyc@14`.\n\n```json\n{\n  \"scripts\": {\n    \"test\": \"npx nyc@latest mocha\"\n  }\n}\n```\n\nThis is a good way of testing upcoming releases of nyc, usually on the `next` tag.\n\n**Note**: If you use [`jest`](https://npm.im/jest) or [`tap`](https://www.node-tap.org/), you do not need to install `nyc`.\nThose runners already have the IstanbulJS libraries to provide coverage for you.\nFollow their documentation to enable and configure coverage reporting.\n\n## Configuring `nyc`\n\nnyc accepts a wide variety of configuration arguments, run `npx nyc --help` for thorough documentation.\n\nConfiguration arguments on the command-line should be provided prior to the program that nyc is executing.\nAs an example, the following command executes `ava`, and indicates to nyc that it should output both an `lcov` (`lcov.info` + html report) and a `text-summary` coverage report.\n\n```shell\nnyc --reporter=lcov --reporter=text-summary ava\n```\n\n### Babel projects\n\nPlease start with the pre-configured [`@istanbuljs/nyc-config-babel`] preset.\nYou can add your custom configuration options as shown below.\n\n### TypeScript projects\n\nPlease start with the pre-configured [`@istanbuljs/nyc-config-typescript`](https://www.npmjs.com/package/@istanbuljs/nyc-config-typescript) preset.\n\n#### Adding your overrides\n\nnyc allows you to inherit other configurations using the key `extends` in the `package.json` stanza, `.nycrc`, or YAML files.\nYou can then add the specific configuration options you want that aren't in that particular shared config, e.g.\n```json\n{\n  \"nyc\": {\n    \"extends\": \"@istanbuljs/nyc-config-typescript\",\n    \"all\": true,\n    \"check-coverage\": true\n  }\n}\n```\n\n### Configuration files\n\nAny configuration options that can be set via the command line can also be specified in the `nyc` stanza of your package.json, or within a seperate configuration file - a variety of flavors are available:\n\n| File name       | File Association |\n|-----------------|------------------|\n| `.nycrc`        | JSON             |\n| `.nycrc.json`   | JSON             |\n| `.nycrc.yaml`   | YAML             |\n| `.nycrc.yml`    | YAML             |\n| `nyc.config.js` | CommonJS export  |\n\n### Common Configuration Options\n\nSee `nyc --help` for all options available.\nYou can set these in any of the files listed above, or from the command line.\nThis table is a quick TLDR for the rest of this readme and there are more advanced docs available.\n\n| Option name | Description | Type | Default |\n| ----------- | ----------- | ---- | ------- |\n| `all` | Whether or not to instrument all files (not just the ones touched by your test suite) | `Boolean` | `false` |\n| `check-coverage` | Check whether coverage is within thresholds, fail if not | `Boolean` | `false` |\n| `extension` | List of extensions that nyc should attempt to handle in addition to `.js` | `Array<String>` | `['.js']` |\n| `include` | See [selecting files for coverage] for more info | `Array<String>` | `['**']`|\n| `exclude` | See [selecting files for coverage] for more info | `Array<String>` | [list](https://github.com/istanbuljs/istanbuljs/blob/master/packages/test-exclude/default-exclude.js) |\n| `reporter` | [Coverage reporters to use](https://istanbul.js.org/docs/advanced/alternative-reporters/) | `Array<String>` | `['text']` |\n| `report-dir` | Where to put the coverage report files | `String` | `./coverage` |\n| `skip-full` | Don't show files with 100% statement, branch, and function coverage | `Boolean` | `false` |\n| `temp-dir` | Directory to output raw coverage information to | `String` | `./.nyc_output` |\n\nConfiguration can also be provided by `nyc.config.js` if programmed logic is required:\n```js\n'use strict'; \nconst {defaultExclude} = require('test-exclude');\nconst isWindows = require('is-windows');\n\nlet platformExclude = [\n  isWindows() ? 'lib/posix.js' : 'lib/win32.js'\n];\n\nmodule.exports = {\n  exclude: platformExclude.concat(defaultExclude)\n};\n```\n\n### Publish and reuse your nyc configuration(s)\n\nTo publish and reuse your own `nyc` configuration, simply create an npm module that exports your JSON config (via [`index.json`](https://github.com/istanbuljs/istanbuljs/blob/master/packages/nyc-config-typescript/) or a CJS [`index.js`](https://github.com/istanbuljs/istanbuljs/blob/master/packages/nyc-config-hook-run-in-this-context/)).\n\nA more advanced use case would be to combine multiple shared configs in a `nyc.config.js` file:\n```js\nconst babelConfig = require('@istanbuljs/nyc-config-babel');\nconst hookRunInThisContextConfig = require('@istanbuljs/nyc-config-hook-run-in-this-context');\n\nmodule.exports = {\n  ...babelConfig,\n  ...hookRunInThisContextConfig,\n  all: true,\n  'check-coverage': true\n};\n```\n\n## Selecting files for coverage\n\nBy default, nyc only collects coverage for source files that are visited during a test.\nIt does this by watching for files that are `require()`'d during the test.\nWhen a file is `require()`'d, nyc creates and returns an instrumented version of the source, rather than the original. \nOnly source files that are visited during a test will appear in the coverage report and contribute to coverage statistics.\n\nnyc will instrument all files if the `--all` flag is set or if running `nyc instrument`.\nIn this case all files will appear in the coverage report and contribute to coverage statistics.\n\nnyc will only collect coverage for files that are located under `cwd`, and then only `*.js` files or files with extensions listed in the `extension` array.\n\nYou can reduce the set of instrumented files by adding `include` and `exclude` filter arrays to your config.\nThese allow you to shape the set of instrumented files by specifying glob patterns that can filter files from the default instrumented set.\nThe `exclude` array may also use exclude negated glob patterns, these are specified with a `!` prefix, and can restore sub-paths of excluded paths.\n\nGlobs are matched using [minimatch](https://www.npmjs.com/package/minimatch).\n\nWe use the following process to remove files from consideration:\n 1. Limit the set of instrumented files to those files in paths listed in the `include` array.\n 2. Remove any files that are found in the `exclude` array.\n 3. Restore any exclude negated files that have been excluded in step 2.\n\n### Using include and exclude arrays\n\nIf there are paths specified in the `include` array, then the set of instrumented files will be limited to eligible files found in those paths.\nIf the `include` array is left undefined all eligible files will be included, equivalent to setting `include: ['**']`.\nMultiple `include` globs can be specified on the command line, each must follow a `--include`, `-n` switch.\n\nIf there are paths specified in the `exclude` array, then the set of instrumented files will not feature eligible files found in those paths.\nYou can also specify negated paths in the `exclude` array, by prefixing them with a `!`.\nNegated paths can restore paths that have been already been excluded in the `exclude` array.\nMultiple `exclude` globs can be specified on the command line, each must follow a `--exclude`, `-x` switch.\n\nThe default `exclude` list is defined in the [test-exclude module](https://github.com/istanbuljs/istanbuljs/blob/master/packages/test-exclude/default-exclude.js).\nSpecifying your own exclude property completely replaces these defaults.\n\nFor example, the following config will collect coverage for every file in the `src` directory regardless of whether it is `require()`'d in a test.\nIt will also exclude any files with the extension `.spec.js`.\n\n```json\n{\n  \"nyc\": {\n    \"all\": true,\n    \"include\": [\n      \"src/**/*.js\"\n    ],\n    \"exclude\": [\n      \"**/*.spec.js\"\n    ]\n  }\n}\n```\n\n**Note:** Be wary of automatic OS glob expansion when specifying include/exclude globs with the CLI.\nTo prevent this, wrap each glob in single quotes.\n\n### Including files within `node_modules`\n\nWe always add `**/node_modules/**` to the exclude list, even if not specified in the config.\nYou can override this by setting `--exclude-node-modules=false`.\n\nFor example, in the following config, `\"excludeNodeModules: false\"` will prevent `node_modules` from being added to the exclude rules. \nThe set of include rules then restrict nyc to only consider instrumenting files found under the `lib/` and `node_modules/@my-org/` directories.\nThe exclude rules then prevent nyc instrumenting anything in a `test` folder and the file `node_modules/@my-org/something/unwanted.js`.\n\n```json\n{\n  \"nyc\": {\n    \"all\": true,\n    \"include\": [\n      \"lib/**\",\n      \"node_modules/@my-org/**\"\n    ],\n    \"exclude\": [\n      \"node_modules/@my-org/something/unwanted.js\",\n      \"**/test/**\"\n    ],\n    \"excludeNodeModules\": false\n  }\n}\n```\n\n## Setting the project root directory\n\nnyc runs a lot of file system operations relative to the project root directory.\nDuring startup nyc will look for the *default* project root directory.\nThe *default* project root directory is the first directory found that contains a `package.json` file when searching from the current working directory up.\nIf nyc fails to find a directory containing a `package.json` file, it will use the current working directory as the *default* project root directory.\nYou can change the project root directory with the `--cwd` option.\n\nnyc uses the project root directory when:\n * looking for source files to instrument\n * creating globs for include and exclude rules during file selection\n * loading custom require hooks from the `require` array\n\nnyc may create artefact directories within the project root, with these defaults:\n  * the report directory, `<project-root>/coverage`\n  * the cache directory, `<project-root>/node_modules/.cache/nyc`\n  * the temp directory, `<project-root>/.nyc_output`\n\n## Require additional modules\n\nThe `--require` flag can be provided to `nyc` to indicate that additional modules should be required in the subprocess collecting coverage:\n\n```\nnyc --require esm mocha\n```\n\n### Interaction with `--all` flag\n\nThe `--require` flag also operates on the main nyc process for use by `--all`.\nFor example, in situations with `nyc --all --instrument false` and [`babel-plugin-istanbul`] setup the `--all` option only works if `--require @babel/register` is passed to nyc.\nPassing it to mocha would cause the tests to be instrumented but unloaded sources would not be seen.\nThe [`@istanbuljs/nyc-config-babel`] package handles this for you!\n\n## Caching\n\n`nyc`'s default behavior is to cache instrumented files to disk to prevent instrumenting source files multiple times, and speed `nyc` execution times.\nYou can disable this behavior by running `nyc` with the `--cache false` flag.\nYou can also change the default cache directory from `./node_modules/.cache/nyc` by setting the `--cache-dir` flag.\n\n## Coverage thresholds\n\nYou can set custom coverage thresholds that will fail if `check-coverage` is set to `true` and your coverage drops below those thresholds.\nFor example, in the following configuration, dropping below 80% branch, line, functions, or statements coverage would fail the build (you can have any combination of these):\n\n```json\n{\n  \"nyc\": {\n    \"branches\": 80,\n    \"lines\": 80,\n    \"functions\": 80,\n    \"statements\": 80\n  }\n}\n```\n\nTo do this check on a per-file basis (as opposed to in aggregate), set the `per-file` option to `true`.\n\n### High and low watermarks\n\nSeveral of the coverage reporters supported by nyc display special information for high and low watermarks:\n\n* high-watermarks represent healthy test coverage (in many reports this is represented with green highlighting).\n* low-watermarks represent sub-optimal coverage levels (in many reports this is represented with red highlighting).\n\nYou can specify custom high and low watermarks in nyc's configuration:\n\n```json\n{\n  \"nyc\": {\n    \"watermarks\": {\n      \"lines\": [80, 95],\n      \"functions\": [80, 95],\n      \"branches\": [80, 95],\n      \"statements\": [80, 95]\n    }\n  }\n}\n```\n\n## Parsing Hints (Ignoring Lines)\n\nThere may be some sections of your codebase that you wish to purposefully\nexclude from coverage tracking, to do so you can use the following parsing\nhints:\n\n* `/* istanbul ignore if */`: ignore the next if statement.\n* `/* istanbul ignore else */`: ignore the else portion of an if statement.\n* `/* istanbul ignore next */`: ignore the next _thing_ in the source-code (\n functions, if statements, classes, you name it).\n* `/* istanbul ignore file */`: ignore an entire source-file (this should be\n  placed at the top of the file).\n\n## Ignoring Methods\n\nThere may be some methods that you want to universally ignore out of your classes\nrather than having to ignore every instance of that method:\n\n```json\n{\n  \"nyc\": {\n    \"ignore-class-method\": \"render\"\n  }\n}\n```\n\n## Combining reports from multiple runs\nIf for whatever reason you have different test runners in your project or a different series of test runs for different kinds of tests, nyc will automatically combine the coverage report for you if configured correctly with the `--no-clean` flag and the `report` command.\nOriginally inspired by @janiukjf in #1001, here's an example, where the `test:*` scripts (not shown) invoke only your test runner(s) and not nyc:\n\n```json\n{\n  \"scripts\": {\n    \"cover\": \"npm run cover:unit && npm run cover:integration && npm run cover:report\",\n    \"cover:unit\": \"nyc --silent npm run test:unit\",\n    \"cover:integration\": \"nyc --silent --no-clean npm run test:integration\",\n    \"cover:report\": \"nyc report --reporter=lcov --reporter=text\"\n  }\n}\n```\n\n### What about `nyc merge`?\n\nThe `nyc merge` command is for producing one _raw coverage output file_ that combines the results from many test runs.\nSo if you had the above setup and needed to produce a single `coverage.json` for some external tool, you could do:\n\n```json\n{\n  \"scripts\": {\n    \"cover:merge\": \"npm run cover:unit && npm run cover:integration && nyc merge .nyc_output coverage.json\"\n  }\n}\n```\n\n## Source-Map support for pre-instrumented codebases\n\nIf you opt to pre-instrument your source-code (rather than using a just-in-time transpiler like [`@babel/register`]) nyc supports both inline source-maps and `.map` files.\n\n_Important: If you are using nyc with a project that pre-instruments its code, run nyc with the configuration option `--exclude-after-remap` set to `false`.\nOtherwise nyc's reports will exclude any files that source-maps remap to folders covered under exclude rules._\n\n## [Integrating with coveralls](./docs/setup-coveralls.md)\n\n## [Integrating with codecov](./docs/setup-codecov.md)\n\n## [Producing instrumented source](./docs/instrument.md)\n\n## Integrating with TAP formatters\n\nMany testing frameworks (Mocha, Tape, Tap, etc.) can produce [TAP](https://en.wikipedia.org/wiki/Test_Anything_Protocol) output. [tap-nyc](https://github.com/MegaArman/tap-nyc) is a TAP formatter designed to look nice with nyc.\n\n## More tutorials\n\nYou can find more tutorials at http://istanbul.js.org/docs/tutorials\n\n## Other advanced features\n\nTake a look at http://istanbul.js.org/docs/advanced/ and please feel free to [contribute documentation](https://github.com/istanbuljs/istanbuljs.github.io/tree/development/content).\n\n[`@babel/register`]: https://www.npmjs.com/package/@babel/register\n[`babel-plugin-istanbul`]: https://github.com/istanbuljs/babel-plugin-istanbul\n[`@istanbuljs/nyc-config-babel`]: https://www.npmjs.com/package/@istanbuljs/nyc-config-babel\n[selecting files for coverage]: #selecting-files-for-coverage\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/istanbuljs/nyc.git"
  },
  "scripts": {
    "clean": "rimraf ./.nyc_output ./node_modules/.cache ./.self_coverage ./test/fixtures/.nyc_output ./test/fixtures/node_modules/.cache ./self-coverage",
    "instrument": "node ./build-self-coverage.js",
    "lint": "standard",
    "posttest": "npm run report",
    "pretest": "npm run lint && npm run clean && npm run instrument",
    "release": "standard-version",
    "report": "node ./bin/nyc report --temp-dir ./.self_coverage/ -r text -r lcov",
    "snap": "cross-env TAP_SNAPSHOT=1 npm test",
    "test": "tap -t360 --no-cov -b test/*.js"
  },
  "standard": {
    "ignore": [
      "**/fixtures/**",
      "**/test/build/*"
    ]
  },
  "version": "14.1.1"
}
